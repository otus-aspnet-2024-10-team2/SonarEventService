// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250413164027_AddAearchGroupsAndMembers")]
    partial class AddAearchGroupsAndMembers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Domain.Entities.GroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Domain.Entities.SearchGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("LeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SearchRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("SearchGroups");
                });

            modelBuilder.Entity("Domain.Entities.SearchLeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SearchLeader");
                });

            modelBuilder.Entity("Domain.Entities.SearchRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SearchRequest");
                });

            modelBuilder.Entity("Domain.Entities.SearchTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SearchGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SearchGroupId");

                    b.ToTable("SearchTask");
                });

            modelBuilder.Entity("Domain.Entities.SearchUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("SearchUser");
                });

            modelBuilder.Entity("Domain.Entities.SonarProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SonarProcess");
                });

            modelBuilder.Entity("Domain.Entities.SonarTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SonarProcessId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SonarProcessId");

                    b.ToTable("SonarTasks");
                });

            modelBuilder.Entity("Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("Domain.Entities.SearchGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SearchUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SearchGroup", b =>
                {
                    b.HasOne("Domain.Entities.SearchLeader", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SearchRequest", "SearchRequest")
                        .WithMany()
                        .HasForeignKey("SearchRequestId");

                    b.Navigation("Leader");

                    b.Navigation("SearchRequest");
                });

            modelBuilder.Entity("Domain.Entities.SearchTask", b =>
                {
                    b.HasOne("Domain.Entities.SearchGroup", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SearchGroupId");
                });

            modelBuilder.Entity("Domain.Entities.SonarTask", b =>
                {
                    b.HasOne("Domain.Entities.SonarProcess", "SonarProcess")
                        .WithMany("SonarTasks")
                        .HasForeignKey("SonarProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SonarProcess");
                });

            modelBuilder.Entity("Domain.Entities.SearchGroup", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.SonarProcess", b =>
                {
                    b.Navigation("SonarTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
